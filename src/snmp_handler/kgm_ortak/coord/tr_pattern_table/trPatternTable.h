/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef TRPATTERNTABLE_H
#define TRPATTERNTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(kgm-ortak)
config_require(kgm-ortak/trPatternTable/trPatternTable_interface)
config_require(kgm-ortak/trPatternTable/trPatternTable_data_access)
config_require(kgm-ortak/trPatternTable/trPatternTable_data_get)
config_require(kgm-ortak/trPatternTable/trPatternTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for trPatternTable */
#include "trPatternTable_oids.h"

/* enum definions */
#include "trPatternTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_trPatternTable(void);
void shutdown_trPatternTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table trPatternTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * kgm-ortak::trPatternTable is subid 2 of coord.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.59873.4.2.1.9.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review trPatternTable registration context.
     */
typedef netsnmp_data_list trPatternTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review trPatternTable data context structure.
 * This structure is used to represent the data for trPatternTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * trPatternTable.
 */
typedef struct trPatternTable_data_s {
    
        /*
         * patternEnabled(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternEnabled;
    
        /*
         * patternExecMode(4)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   patternExecMode;
    
        /*
         * patternPlanMode(5)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   patternPlanMode;
    
        /*
         * patternStage(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   patternStage[256];
size_t      patternStage_len; /* # of char elements, not bytes */
    
        /*
         * patternStruct(7)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternStruct;
    
        /*
         * patternPlanNumber(8)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternPlanNumber;
    
        /*
         * patternSync(9)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternSync;
    
        /*
         * patternOffsetTime(10)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternOffsetTime;
    
        /*
         * patternStageCount(11)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternStageCount;
    
        /*
         * patternStageTime(12)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   patternStageTime[256];
size_t      patternStageTime_len; /* # of char elements, not bytes */
    
        /*
         * patternStageSensorFailureMask(13)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   patternStageSensorFailureMask[256];
size_t      patternStageSensorFailureMask_len; /* # of char elements, not bytes */
    
        /*
         * patternStartDate(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   patternStartDate;
    
        /*
         * patternEndDate(15)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   patternEndDate;
    
        /*
         * patternGreenwaveCycleTime(16)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternGreenwaveCycleTime;
    
        /*
         * patternGreenwaveStageId(17)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternGreenwaveStageId;
    
        /*
         * patternGreenWaveReturnStageId(18)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternGreenWaveReturnStageId;
    
        /*
         * patternSensorEnable(19)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternSensorEnable;
    
        /*
         * patternSensorSupervision(20)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternSensorSupervision;
    
        /*
         * patternOutputSupervision(21)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   patternOutputSupervision;
    
} trPatternTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review trPatternTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef trPatternTable_data trPatternTable_undo_data;

/*
 * TODO:120:r: |-> Review trPatternTable mib index.
 * This structure is used to represent the index for trPatternTable.
 */
typedef struct trPatternTable_mib_index_s {

        /*
         * subJunctionNumber(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   subJunctionNumber;

        /*
         * patternIndex(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   patternIndex;


} trPatternTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review trPatternTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_trPatternTable_IDX_LEN     2


/* *********************************************************************
 * TODO:130:o: |-> Review trPatternTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * trPatternTable_rowreq_ctx pointer.
 */
typedef struct trPatternTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_trPatternTable_IDX_LEN];
    
    trPatternTable_mib_index        tbl_idx;
    
    trPatternTable_data              data;
    trPatternTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to trPatternTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *trPatternTable_data_list;

} trPatternTable_rowreq_ctx;

typedef struct trPatternTable_ref_rowreq_ctx_s {
    trPatternTable_rowreq_ctx *rowreq_ctx;
} trPatternTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int trPatternTable_pre_request(trPatternTable_registration * user_context);
    int trPatternTable_post_request(trPatternTable_registration * user_context,
        int rc);

    int trPatternTable_rowreq_ctx_init(trPatternTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void trPatternTable_rowreq_ctx_cleanup(trPatternTable_rowreq_ctx *rowreq_ctx);

    int trPatternTable_check_dependencies(trPatternTable_rowreq_ctx * rowreq_ctx); 
    int trPatternTable_commit(trPatternTable_rowreq_ctx * rowreq_ctx);

    trPatternTable_rowreq_ctx *
                  trPatternTable_row_find_by_mib_index(trPatternTable_mib_index *mib_idx);

extern const oid trPatternTable_oid[];
extern const int trPatternTable_oid_size;


#include "trPatternTable_interface.h"
#include "trPatternTable_data_access.h"
#include "trPatternTable_data_get.h"
#include "trPatternTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* TRPATTERNTABLE_H */
/** @} */
