/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef SIGNALSTATETABLE_H
#define SIGNALSTATETABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(kgm-ortak);
config_require(kgm-ortak/signalStateTable/signalStateTable_interface);
config_require(kgm-ortak/signalStateTable/signalStateTable_data_access);
config_require(kgm-ortak/signalStateTable/signalStateTable_data_get);
config_require(kgm-ortak/signalStateTable/signalStateTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for signalStateTable */
#include "signalStateTable_oids.h"

/* enum definions */
#include "signalStateTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_signalStateTable(void);
void shutdown_signalStateTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table signalStateTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * kgm-ortak::signalStateTable is subid 2 of signalState.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.59873.4.2.1.4.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review signalStateTable registration context.
     */
typedef netsnmp_data_list signalStateTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review signalStateTable data context structure.
 * This structure is used to represent the data for signalStateTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * signalStateTable.
 */
typedef struct signalStateTable_data_s {
    
        /*
         * signalStatePatternNo(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStatePatternNo;
    
        /*
         * signalStateExecMode(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   signalStateExecMode;
    
        /*
         * signalStatePlanMode(4)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   signalStatePlanMode;
    
        /*
         * signalStateStructure(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateStructure;
    
        /*
         * signalStatePlan(6)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStatePlan;
    
        /*
         * signalStateStage(7)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   signalStateStage[1024];
size_t      signalStateStage_len; /* # of char elements, not bytes */
    
        /*
         * signalStateNextStage(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   signalStateNextStage[1024];
size_t      signalStateNextStage_len; /* # of char elements, not bytes */
    
        /*
         * signalStateStep(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateStep;
    
        /*
         * signalStateTransitionFlag(10)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateTransitionFlag;
    
        /*
         * signalStateTransitionStep(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateTransitionStep;
    
        /*
         * signalStateElapsedTime(12)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   signalStateElapsedTime[1024];
size_t      signalStateElapsedTime_len; /* # of char elements, not bytes */
    
        /*
         * signalStateRemainingTime(13)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   signalStateRemainingTime[1024];
size_t      signalStateRemainingTime_len; /* # of char elements, not bytes */
    
        /*
         * signalStateStepTime(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateStepTime;
    
        /*
         * signalStateCycleTime(15)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateCycleTime;
    
        /*
         * patternTimeToNextCycle(16)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   patternTimeToNextCycle;
    
        /*
         * signalPlanLastChangeTime(17)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   signalPlanLastChangeTime;
    
} signalStateTable_data;


/*
 * TODO:120:r: |-> Review signalStateTable mib index.
 * This structure is used to represent the index for signalStateTable.
 */
typedef struct signalStateTable_mib_index_s {

        /*
         * signalStateIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   signalStateIndex;


} signalStateTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review signalStateTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_signalStateTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review signalStateTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * signalStateTable_rowreq_ctx pointer.
 */
typedef struct signalStateTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_signalStateTable_IDX_LEN];
    
    signalStateTable_mib_index        tbl_idx;
    
    signalStateTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to signalStateTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *signalStateTable_data_list;

} signalStateTable_rowreq_ctx;

typedef struct signalStateTable_ref_rowreq_ctx_s {
    signalStateTable_rowreq_ctx *rowreq_ctx;
} signalStateTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int signalStateTable_pre_request(signalStateTable_registration * user_context);
    int signalStateTable_post_request(signalStateTable_registration * user_context,
        int rc);

    int signalStateTable_rowreq_ctx_init(signalStateTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void signalStateTable_rowreq_ctx_cleanup(signalStateTable_rowreq_ctx *rowreq_ctx);


    signalStateTable_rowreq_ctx *
                  signalStateTable_row_find_by_mib_index(signalStateTable_mib_index *mib_idx);

extern const oid signalStateTable_oid[];
extern const int signalStateTable_oid_size;


#include "signalStateTable_interface.h"
#include "signalStateTable_data_access.h"
#include "signalStateTable_data_get.h"
#include "signalStateTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* SIGNALSTATETABLE_H */
/** @} */
