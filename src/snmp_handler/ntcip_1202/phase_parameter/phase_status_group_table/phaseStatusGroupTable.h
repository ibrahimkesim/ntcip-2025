/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef PHASESTATUSGROUPTABLE_H
#define PHASESTATUSGROUPTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(NTCIP1202-v03);
config_require(NTCIP1202-v03/phaseStatusGroupTable/phaseStatusGroupTable_interface);
config_require(NTCIP1202-v03/phaseStatusGroupTable/phaseStatusGroupTable_data_access);
config_require(NTCIP1202-v03/phaseStatusGroupTable/phaseStatusGroupTable_data_get);
config_require(NTCIP1202-v03/phaseStatusGroupTable/phaseStatusGroupTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for phaseStatusGroupTable */
#include "phaseStatusGroupTable_oids.h"

/* enum definions */
#include "phaseStatusGroupTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_phaseStatusGroupTable(void);
void shutdown_phaseStatusGroupTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table phaseStatusGroupTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NTCIP1202-v03::phaseStatusGroupTable is subid 4 of phase.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.1206.4.2.1.1.4, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review phaseStatusGroupTable registration context.
     */
typedef netsnmp_data_list phaseStatusGroupTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review phaseStatusGroupTable data context structure.
 * This structure is used to represent the data for phaseStatusGroupTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * phaseStatusGroupTable.
 */
typedef struct phaseStatusGroupTable_data_s {
    
        /*
         * phaseStatusGroupReds(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupReds;
    
        /*
         * phaseStatusGroupYellows(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupYellows;
    
        /*
         * phaseStatusGroupGreens(4)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupGreens;
    
        /*
         * phaseStatusGroupDontWalks(5)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupDontWalks;
    
        /*
         * phaseStatusGroupPedClears(6)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupPedClears;
    
        /*
         * phaseStatusGroupWalks(7)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupWalks;
    
        /*
         * phaseStatusGroupVehCalls(8)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupVehCalls;
    
        /*
         * phaseStatusGroupPedCalls(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupPedCalls;
    
        /*
         * phaseStatusGroupPhaseOns(10)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupPhaseOns;
    
        /*
         * phaseStatusGroupPhaseNexts(11)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupPhaseNexts;
    
} phaseStatusGroupTable_data;


/*
 * TODO:120:r: |-> Review phaseStatusGroupTable mib index.
 * This structure is used to represent the index for phaseStatusGroupTable.
 */
typedef struct phaseStatusGroupTable_mib_index_s {

        /*
         * phaseStatusGroupNumber(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   phaseStatusGroupNumber;


} phaseStatusGroupTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review phaseStatusGroupTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_phaseStatusGroupTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review phaseStatusGroupTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * phaseStatusGroupTable_rowreq_ctx pointer.
 */
typedef struct phaseStatusGroupTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_phaseStatusGroupTable_IDX_LEN];
    
    phaseStatusGroupTable_mib_index        tbl_idx;
    
    phaseStatusGroupTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to phaseStatusGroupTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *phaseStatusGroupTable_data_list;

} phaseStatusGroupTable_rowreq_ctx;

typedef struct phaseStatusGroupTable_ref_rowreq_ctx_s {
    phaseStatusGroupTable_rowreq_ctx *rowreq_ctx;
} phaseStatusGroupTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int phaseStatusGroupTable_pre_request(phaseStatusGroupTable_registration * user_context);
    int phaseStatusGroupTable_post_request(phaseStatusGroupTable_registration * user_context,
        int rc);

    int phaseStatusGroupTable_rowreq_ctx_init(phaseStatusGroupTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void phaseStatusGroupTable_rowreq_ctx_cleanup(phaseStatusGroupTable_rowreq_ctx *rowreq_ctx);


    phaseStatusGroupTable_rowreq_ctx *
                  phaseStatusGroupTable_row_find_by_mib_index(phaseStatusGroupTable_mib_index *mib_idx);

extern const oid phaseStatusGroupTable_oid[];
extern const int phaseStatusGroupTable_oid_size;


#include "phaseStatusGroupTable_interface.h"
#include "phaseStatusGroupTable_data_access.h"
#include "phaseStatusGroupTable_data_get.h"
#include "phaseStatusGroupTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* PHASESTATUSGROUPTABLE_H */
/** @} */
