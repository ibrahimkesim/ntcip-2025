/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef VEHICLEDETECTORTABLE_H
#define VEHICLEDETECTORTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(NTCIP1202-v03);
config_require(NTCIP1202-v03/vehicleDetectorTable/vehicleDetectorTable_interface);
config_require(NTCIP1202-v03/vehicleDetectorTable/vehicleDetectorTable_data_access);
config_require(NTCIP1202-v03/vehicleDetectorTable/vehicleDetectorTable_data_get);
config_require(NTCIP1202-v03/vehicleDetectorTable/vehicleDetectorTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for vehicleDetectorTable */
#include "vehicleDetectorTable_oids.h"

/* enum definions */
#include "vehicleDetectorTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_vehicleDetectorTable(void);
void shutdown_vehicleDetectorTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table vehicleDetectorTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NTCIP1202-v03::vehicleDetectorTable is subid 2 of detector.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.1206.4.2.1.2.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review vehicleDetectorTable registration context.
     */
typedef netsnmp_data_list vehicleDetectorTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review vehicleDetectorTable data context structure.
 * This structure is used to represent the data for vehicleDetectorTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * vehicleDetectorTable.
 */
typedef struct vehicleDetectorTable_data_s {
    
        /*
         * vehicleDetectorOptions(2)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorOptions;
    
        /*
         * vehicleDetectorCallPhase(4)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorCallPhase;
    
        /*
         * vehicleDetectorSwitchPhase(5)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorSwitchPhase;
    
        /*
         * vehicleDetectorDelay(6)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorDelay;
    
        /*
         * vehicleDetectorExtend(7)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorExtend;
    
        /*
         * vehicleDetectorQueueLimit(8)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorQueueLimit;
    
        /*
         * vehicleDetectorNoActivity(9)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorNoActivity;
    
        /*
         * vehicleDetectorMaxPresence(10)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorMaxPresence;
    
        /*
         * vehicleDetectorErraticCounts(11)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorErraticCounts;
    
        /*
         * vehicleDetectorFailTime(12)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorFailTime;
    
        /*
         * vehicleDetectorAlarms(13)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   vehicleDetectorAlarms;
    
        /*
         * vehicleDetectorReportedAlarms(14)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   vehicleDetectorReportedAlarms;
    
        /*
         * vehicleDetectorReset(15)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorReset;
    
        /*
         * vehicleDetectorOptions2(16)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorOptions2;
    
        /*
         * vehicleDetectorPairedDetector(17)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
   long   vehicleDetectorPairedDetector;
    
        /*
         * vehicleDetectorPairedDetectorSpacing(18)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
   long   vehicleDetectorPairedDetectorSpacing;
    
        /*
         * vehicleDetectorAvgVehicleLength(19)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   vehicleDetectorAvgVehicleLength;
    
        /*
         * vehicleDetectorLength(20)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/D/h
         */
   long   vehicleDetectorLength;
    
        /*
         * vehicleDetectorTravelMode(21)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
   u_long   vehicleDetectorTravelMode;
    
} vehicleDetectorTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review vehicleDetectorTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef vehicleDetectorTable_data vehicleDetectorTable_undo_data;

/*
 * TODO:120:r: |-> Review vehicleDetectorTable mib index.
 * This structure is used to represent the index for vehicleDetectorTable.
 */
typedef struct vehicleDetectorTable_mib_index_s {

        /*
         * vehicleDetectorNumber(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   vehicleDetectorNumber;


} vehicleDetectorTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review vehicleDetectorTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_vehicleDetectorTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review vehicleDetectorTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * vehicleDetectorTable_rowreq_ctx pointer.
 */
typedef struct vehicleDetectorTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_vehicleDetectorTable_IDX_LEN];
    
    vehicleDetectorTable_mib_index        tbl_idx;
    
    vehicleDetectorTable_data              data;
    vehicleDetectorTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to vehicleDetectorTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *vehicleDetectorTable_data_list;

} vehicleDetectorTable_rowreq_ctx;

typedef struct vehicleDetectorTable_ref_rowreq_ctx_s {
    vehicleDetectorTable_rowreq_ctx *rowreq_ctx;
} vehicleDetectorTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int vehicleDetectorTable_pre_request(vehicleDetectorTable_registration * user_context);
    int vehicleDetectorTable_post_request(vehicleDetectorTable_registration * user_context,
        int rc);

    int vehicleDetectorTable_rowreq_ctx_init(vehicleDetectorTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void vehicleDetectorTable_rowreq_ctx_cleanup(vehicleDetectorTable_rowreq_ctx *rowreq_ctx);

    int vehicleDetectorTable_check_dependencies(vehicleDetectorTable_rowreq_ctx * rowreq_ctx); 
    int vehicleDetectorTable_commit(vehicleDetectorTable_rowreq_ctx * rowreq_ctx);

    vehicleDetectorTable_rowreq_ctx *
                  vehicleDetectorTable_row_find_by_mib_index(vehicleDetectorTable_mib_index *mib_idx);

extern const oid vehicleDetectorTable_oid[];
extern const int vehicleDetectorTable_oid_size;


#include "vehicleDetectorTable_interface.h"
#include "vehicleDetectorTable_data_access.h"
#include "vehicleDetectorTable_data_get.h"
#include "vehicleDetectorTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* VEHICLEDETECTORTABLE_H */
/** @} */
