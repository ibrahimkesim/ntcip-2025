/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef VOLUMEOCCUPANCYTABLE_H
#define VOLUMEOCCUPANCYTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(NTCIP1202-v03)
config_require(NTCIP1202-v03/volumeOccupancyTable/volumeOccupancyTable_interface)
config_require(NTCIP1202-v03/volumeOccupancyTable/volumeOccupancyTable_data_access)
config_require(NTCIP1202-v03/volumeOccupancyTable/volumeOccupancyTable_data_get)
config_require(NTCIP1202-v03/volumeOccupancyTable/volumeOccupancyTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for volumeOccupancyTable */
#include "volumeOccupancyTable_oids.h"

/* enum definions */
#include "volumeOccupancyTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_volumeOccupancyTable(void);
void shutdown_volumeOccupancyTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table volumeOccupancyTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NTCIP1202-v03::volumeOccupancyTable is subid 4 of volumeOccupancyReport.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.1206.4.2.1.2.5.4, length: 13
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review volumeOccupancyTable registration context.
     */
typedef netsnmp_data_list volumeOccupancyTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review volumeOccupancyTable data context structure.
 * This structure is used to represent the data for volumeOccupancyTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * volumeOccupancyTable.
 */
typedef struct volumeOccupancyTable_data_s {
    
        /*
         * detectorVolume(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   detectorVolume;
    
        /*
         * detectorOccupancy(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   detectorOccupancy;
    
        /*
         * detectorAvgSpeed(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/D/h
         */
   long   detectorAvgSpeed;
    
} volumeOccupancyTable_data;


/*
 * TODO:120:r: |-> Review volumeOccupancyTable mib index.
 * This structure is used to represent the index for volumeOccupancyTable.
 */
typedef struct volumeOccupancyTable_mib_index_s {

        /*
         * vehicleDetectorNumber(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   vehicleDetectorNumber;


} volumeOccupancyTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review volumeOccupancyTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_volumeOccupancyTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review volumeOccupancyTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * volumeOccupancyTable_rowreq_ctx pointer.
 */
typedef struct volumeOccupancyTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_volumeOccupancyTable_IDX_LEN];
    
    volumeOccupancyTable_mib_index        tbl_idx;
    
    volumeOccupancyTable_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to volumeOccupancyTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *volumeOccupancyTable_data_list;

} volumeOccupancyTable_rowreq_ctx;

typedef struct volumeOccupancyTable_ref_rowreq_ctx_s {
    volumeOccupancyTable_rowreq_ctx *rowreq_ctx;
} volumeOccupancyTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int volumeOccupancyTable_pre_request(volumeOccupancyTable_registration * user_context);
    int volumeOccupancyTable_post_request(volumeOccupancyTable_registration * user_context,
        int rc);

    int volumeOccupancyTable_rowreq_ctx_init(volumeOccupancyTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void volumeOccupancyTable_rowreq_ctx_cleanup(volumeOccupancyTable_rowreq_ctx *rowreq_ctx);


    volumeOccupancyTable_rowreq_ctx *
                  volumeOccupancyTable_row_find_by_mib_index(volumeOccupancyTable_mib_index *mib_idx);

extern const oid volumeOccupancyTable_oid[];
extern const int volumeOccupancyTable_oid_size;


#include "volumeOccupancyTable_interface.h"
#include "volumeOccupancyTable_data_access.h"
#include "volumeOccupancyTable_data_get.h"
#include "volumeOccupancyTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* VOLUMEOCCUPANCYTABLE_H */
/** @} */
