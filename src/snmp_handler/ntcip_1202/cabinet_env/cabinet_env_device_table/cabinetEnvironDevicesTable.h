/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef CABINETENVIRONDEVICESTABLE_H
#define CABINETENVIRONDEVICESTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(NTCIP1202-v03);
config_require(NTCIP1202-v03/cabinetEnvironDevicesTable/cabinetEnvironDevicesTable_interface);
config_require(NTCIP1202-v03/cabinetEnvironDevicesTable/cabinetEnvironDevicesTable_data_access);
config_require(NTCIP1202-v03/cabinetEnvironDevicesTable/cabinetEnvironDevicesTable_data_get);
config_require(NTCIP1202-v03/cabinetEnvironDevicesTable/cabinetEnvironDevicesTable_data_set);
    /* *INDENT-ON*  */

/* OID and column number definitions for cabinetEnvironDevicesTable */
#include "cabinetEnvironDevicesTable_oids.h"

/* enum definions */
#include "cabinetEnvironDevicesTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_cabinetEnvironDevicesTable(void);
void shutdown_cabinetEnvironDevicesTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table cabinetEnvironDevicesTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NTCIP1202-v03::cabinetEnvironDevicesTable is subid 2 of cabinetEnvironment.
 * Its status is Mandatory.
 * OID: .1.3.6.1.4.1.1206.4.2.1.12.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review cabinetEnvironDevicesTable registration context.
     */
typedef netsnmp_data_list cabinetEnvironDevicesTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review cabinetEnvironDevicesTable data context structure.
 * This structure is used to represent the data for cabinetEnvironDevicesTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * cabinetEnvironDevicesTable.
 */
typedef struct cabinetEnvironDevicesTable_data_s {
    
        /*
         * cabinetEnvironDeviceType(2)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cabinetEnvironDeviceType;
    
        /*
         * cabinetEnvironDeviceDescription(4)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/h
         */
   char   cabinetEnvironDeviceDescription[64];
size_t      cabinetEnvironDeviceDescription_len; /* # of char elements, not bytes */
    
        /*
         * cabinetEnvironDeviceOnStatus(5)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cabinetEnvironDeviceOnStatus;
    
        /*
         * cabinetEnvironDeviceErrorStatus(6)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cabinetEnvironDeviceErrorStatus;
    
} cabinetEnvironDevicesTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review cabinetEnvironDevicesTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef cabinetEnvironDevicesTable_data cabinetEnvironDevicesTable_undo_data;

/*
 * TODO:120:r: |-> Review cabinetEnvironDevicesTable mib index.
 * This structure is used to represent the index for cabinetEnvironDevicesTable.
 */
typedef struct cabinetEnvironDevicesTable_mib_index_s {

        /*
         * cabinetEnvironDeviceNumber(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cabinetEnvironDeviceNumber;

        /*
         * cabinetEnvironDeviceIndex(3)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cabinetEnvironDeviceIndex;


} cabinetEnvironDevicesTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review cabinetEnvironDevicesTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_cabinetEnvironDevicesTable_IDX_LEN     2


/* *********************************************************************
 * TODO:130:o: |-> Review cabinetEnvironDevicesTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * cabinetEnvironDevicesTable_rowreq_ctx pointer.
 */
typedef struct cabinetEnvironDevicesTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_cabinetEnvironDevicesTable_IDX_LEN];
    
    cabinetEnvironDevicesTable_mib_index        tbl_idx;
    
    cabinetEnvironDevicesTable_data              data;
    cabinetEnvironDevicesTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to cabinetEnvironDevicesTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *cabinetEnvironDevicesTable_data_list;

} cabinetEnvironDevicesTable_rowreq_ctx;

typedef struct cabinetEnvironDevicesTable_ref_rowreq_ctx_s {
    cabinetEnvironDevicesTable_rowreq_ctx *rowreq_ctx;
} cabinetEnvironDevicesTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int cabinetEnvironDevicesTable_pre_request(cabinetEnvironDevicesTable_registration * user_context);
    int cabinetEnvironDevicesTable_post_request(cabinetEnvironDevicesTable_registration * user_context,
        int rc);

    int cabinetEnvironDevicesTable_rowreq_ctx_init(cabinetEnvironDevicesTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void cabinetEnvironDevicesTable_rowreq_ctx_cleanup(cabinetEnvironDevicesTable_rowreq_ctx *rowreq_ctx);

    int cabinetEnvironDevicesTable_check_dependencies(cabinetEnvironDevicesTable_rowreq_ctx * rowreq_ctx); 
    int cabinetEnvironDevicesTable_commit(cabinetEnvironDevicesTable_rowreq_ctx * rowreq_ctx);

    cabinetEnvironDevicesTable_rowreq_ctx *
                  cabinetEnvironDevicesTable_row_find_by_mib_index(cabinetEnvironDevicesTable_mib_index *mib_idx);

extern const oid cabinetEnvironDevicesTable_oid[];
extern const int cabinetEnvironDevicesTable_oid_size;


#include "cabinetEnvironDevicesTable_interface.h"
#include "cabinetEnvironDevicesTable_data_access.h"
#include "cabinetEnvironDevicesTable_data_get.h"
#include "cabinetEnvironDevicesTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CABINETENVIRONDEVICESTABLE_H */
/** @} */
